import os
import sys
import unicodedata

import tkinter as tk
from tkinter import ttk, messagebox

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'database')))

from database.gym import (
    add_client_to_db,
    get_all_clients_with_details,
    was_client_present_today,
    delete_client_by_id
)
from attendance_window import open_attendance_calendar_window
from edit_client_window import open_edit_client_details

def open_admin_interface(user):
    username = user[1]
    user_id = user[0]

    admin_window = tk.Toplevel()
    admin_window.title("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    admin_window.state('zoomed')
    admin_window.configure(bg='#2c3e50')
    admin_window.option_add("*Font", "Arial 12")

    main_frame = tk.Frame(admin_window, bg='#2c3e50')
    main_frame.pack(expand=True, fill="both")

    title_label = tk.Label(
        main_frame,
        text="–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        font=("Arial", 50, "bold"),
        fg="white",
        bg="#2c3e50"
    )
    title_label.pack(pady=(80, 5))  # –†–∞–Ω—ñ—à–µ –±—É–ª–æ (40, 5)

    welcome_label = tk.Label(
        main_frame,
        text=f"–í—ñ—Ç–∞—î–º–æ, {username}!",
        font=("Arial", 35),
        fg="white",
        bg="#2c3e50"
    )
    welcome_label.pack(pady=(0, 40))  # –ë—É–ª–æ (0, 30)

    icon_frame = tk.Frame(main_frame, bg='#2c3e50')
    icon_frame.place(relx=0.5, rely=0.5, anchor="center")

    btn_style = {
        "font": ("Arial", 70),
        "bg": 'white',
        "fg": '#2c3e50',
        "width": 4,
        "height": 2,
        "relief": "flat",
        "bd": 0,
        "highlightthickness": 0
    }

    def rounded_button_container(master):
        frame = tk.Frame(master, bg='#2c3e50')
        container = tk.Frame(frame, bg='white', width=180, height=180)
        container.pack_propagate(False)
        container.pack(padx=20, pady=10)
        container.configure(highlightbackground="white", highlightthickness=1)
        return frame, container

    def on_enter(e, btn):
        btn['bg'] = '#bdc3c7'

    def on_leave(e, btn):
        btn['bg'] = 'white'

    def open_add_client_window():
        add_win = tk.Toplevel(admin_window)
        add_win.title("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞")
        add_win.geometry("500x500")
        add_win.configure(bg="#34495e")

        tk.Label(add_win, text="–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç", font=("Arial", 20, "bold"), bg="#34495e", fg="white").pack(pady=20)

        def create_labeled_entry(label_text):
            tk.Label(add_win, text=label_text, font=("Arial", 14), bg="#34495e", fg="white").pack(pady=(10, 0))
            entry = tk.Entry(add_win, font=("Arial", 14), width=40)
            entry.pack(pady=5)
            return entry

        entry_name = create_labeled_entry("–ü–æ–≤–Ω–µ —ñ–º‚Äô—è:")
        entry_phone = create_labeled_entry("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
        entry_email = create_labeled_entry("Email:")

        def save_client():
            import re

            name = entry_name.get()
            phone = entry_phone.get()
            email = entry_email.get()

            if not name or not phone or not email:
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è!")
                return

            if not re.match(r"^[–ê-–©–¨–Æ–Ø–Ñ–Ü–á“ê–∞-—â—å—é—è—î—ñ—ó“ë'‚Äô\-\s]{2,}$", name.strip()):
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–Ü–º‚Äô—è –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 –ª—ñ—Ç–µ—Ä–∏.")
                return

            if not re.match(r"^(\+380\d{9}|0\d{9})$", phone.strip()):
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞",
                                     "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +380XXXXXXXXX –∞–±–æ 0XXXXXXXXX.")
                return

            if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w{2,}$", email.strip()):
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email.")
                return

            if add_client_to_db(name, phone, email, user_id):
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ö–ª—ñ—î–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ!")
                add_win.destroy()
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞.")

        tk.Button(add_win, text="–ó–±–µ—Ä–µ–≥—Ç–∏", font=("Arial", 16), bg="#27ae60", fg="white", padx=20, pady=10, command=save_client).pack(pady=30)

    def open_attendance_management_window():

        attend_win = tk.Toplevel()
        attend_win.title("–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ")
        attend_win.geometry("1000x500")
        attend_win.configure(bg='#34495e')

        top_frame = tk.Frame(attend_win, bg='#34495e')
        top_frame.pack(fill='x', padx=20, pady=(10, 0))

        search_var = tk.StringVar()

        tk.Label(top_frame, text='üîç –ü–æ—à—É–∫:', font=('Arial', 12), bg='#34495e', fg='white').pack(side='left')
        tk.Entry(top_frame, textvariable=search_var, font=('Arial', 12), width=30).pack(side='left', padx=(5, 20))
        tk.Label(top_frame, text="–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ", font=("Arial", 20, "bold"),
                 bg='#34495e', fg='white').pack(side='left')

        columns = ('id_clients', 'full_name', 'phone', 'email', 'registration_date',
                   'trainer_name', 'subscription_type', 'payment', 'attendance', 'present_today')

        headers = {
            'id_clients': 'ID',
            'full_name': "–Ü–º'—è",
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'email': 'Email',
            'registration_date': '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
            'trainer_name': "–Ü–º'—è —Ç—Ä–µ–Ω–µ—Ä–∞",
            'subscription_type': '–¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏',
            'payment': '–û–ø–ª–∞—Ç–∞',
            'attendance': '–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è',
            'present_today': '–°—å–æ–≥–æ–¥–Ω—ñ'
        }

        tree = ttk.Treeview(attend_win, columns=columns, show='headings')
        sort_directions = {}
        all_clients_data = []

        def try_cast(val):
            try:
                return float(val)
            except (ValueError, TypeError):
                return str(val).lower()

        def sort_by_column(col):
            col_index = columns.index(col)
            reverse = sort_directions.get(col, False)
            sort_directions[col] = not reverse

            filtered_data = []
            query = search_var.get().lower()
            for row in all_clients_data:
                visible = any(query in str(val).lower() for i, val in enumerate(row) if columns[i] != 'id_clients')
                if visible:
                    filtered_data.append(row)

            filtered_data.sort(key=lambda x: try_cast(x[col_index]), reverse=reverse)

            tree.delete(*tree.get_children())
            for row in filtered_data:
                tree.insert('', tk.END, values=row)

            for col_name in columns:
                direction = ''
                if col_name == col:
                    direction = ' ‚ñº' if reverse else ' ‚ñ≤'
                if col_name == 'id_clients':
                    tree.heading(col_name, text='', command=lambda _col=col_name: sort_by_column(_col))
                    tree.column(col_name, width=0, stretch=False)
                else:
                    tree.heading(col_name, text=headers[col_name] + direction,
                                 command=lambda _col=col_name: sort_by_column(_col))

        for col in columns:
            if col == 'id_clients':
                tree.heading(col, text='', command=lambda _col=col: sort_by_column(_col))
                tree.column(col, width=0, stretch=False)
            else:
                tree.heading(col, text=headers[col], command=lambda _col=col: sort_by_column(_col))
                tree.column(col, anchor='center', width=100)

        for client in get_all_clients_with_details():
            id_client = client[0]
            attendance_status = "‚úÖ" if was_client_present_today(id_client) else "‚ùå"
            values_with_attendance = list(client) + [attendance_status]
            all_clients_data.append(values_with_attendance)
            tree.insert('', tk.END, values=values_with_attendance)

        def filter_clients(*args):
            query = search_var.get().lower()
            tree.delete(*tree.get_children())

            for row in all_clients_data:
                visible = any(query in str(val).lower() for i, val in enumerate(row) if columns[i] != 'id_clients')
                if visible:
                    tree.insert('', tk.END, values=row)

        search_var.trace_add('write', filter_clients)

        tree.pack(expand=True, fill='both', padx=20, pady=10)

        def open_calendar_for_selected():
            selected = tree.focus()
            if not selected:
                messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞.")
                return

            values = tree.item(selected, 'values')
            open_attendance_calendar_window(values)

        tk.Button(attend_win, text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä", font=("Arial", 14), bg="#2980b9", fg="white",
                  command=open_calendar_for_selected).pack(pady=10)

    def open_edit_client_window():

        def normalize_text(text):
            return unicodedata.normalize('NFKD', str(text)).casefold()

        edit_win = tk.Toplevel()
        edit_win.title("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        edit_win.geometry("1000x500")
        edit_win.configure(bg='#34495e')

        top_frame = tk.Frame(edit_win, bg='#34495e')
        top_frame.pack(fill='x', padx=20, pady=(10, 0))

        search_var = tk.StringVar()

        # –¢–∞–±–ª–∏—Ü—è –∫–æ–ª–æ–Ω–æ–∫
        columns = ('id_clients', 'full_name', 'phone', 'email', 'registration_date',
                   'trainer_name', 'subscription_type', 'payment', 'attendance', 'present_today')

        headers = {
            'id_clients': 'ID',
            'full_name': "–Ü–º'—è",
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'email': 'Email',
            'registration_date': '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
            'trainer_name': "–Ü–º'—è —Ç—Ä–µ–Ω–µ—Ä–∞",
            'subscription_type': '–¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏',
            'payment': '–û–ø–ª–∞—Ç–∞',
            'attendance': '–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è',
            'present_today': '–°—å–æ–≥–æ–¥–Ω—ñ'
        }

        tree = ttk.Treeview(edit_win, columns=columns, show='headings')

        sort_directions = {}

        def sort_by_column(col):
            data = []
            for child in tree.get_children():
                values = tree.item(child)['values']
                data.append((values, child))

            col_index = columns.index(col)
            reverse = sort_directions.get(col, False)
            sort_directions[col] = not reverse

            def try_cast(val):
                try:
                    return float(val)
                except (ValueError, TypeError):
                    return str(val).lower()

            data.sort(key=lambda x: try_cast(x[0][col_index]), reverse=reverse)

            for i in tree.get_children():
                tree.delete(i)

            for item in data:
                tree.insert('', tk.END, values=item[0])

            for col_name in columns:
                direction = ''
                if col_name == col:
                    direction = ' ‚ñº' if reverse else ' ‚ñ≤'
                if col_name == 'id_clients':
                    tree.heading(col_name, text='', command=lambda _col=col_name: sort_by_column(_col))
                    tree.column(col_name, width=0, stretch=False)
                else:
                    tree.heading(col_name, text=headers[col_name] + direction,
                                 command=lambda _col=col_name: sort_by_column(_col))

        for col in columns:
            if col == 'id_clients':
                tree.heading(col, text='', command=lambda _col=col: sort_by_column(_col))
                tree.column(col, width=0, stretch=False)
            else:
                tree.heading(col, text=headers[col], command=lambda _col=col: sort_by_column(_col))
                tree.column(col, anchor='center', width=100)

        all_clients_data = []
        for client in get_all_clients_with_details():
            id_client = client[0]
            attendance_status = "‚úÖ" if was_client_present_today(id_client) else "‚ùå"
            values_with_attendance = list(client) + [attendance_status]
            all_clients_data.append(values_with_attendance)
            tree.insert('', tk.END, values=values_with_attendance)

        def filter_clients(*args):
            query = normalize_text(search_var.get())

            tree.delete(*tree.get_children())  # –û—á–∏—Å—Ç–∏—Ç–∏ –¥–µ—Ä–µ–≤–æ

            for row in all_clients_data:
                visible = False
                for i, val in enumerate(row):
                    if i >= len(columns):
                        break
                    if columns[i] == 'id_clients':
                        continue
                    if query in normalize_text(val):
                        visible = True
                        break
                if visible:
                    tree.insert('', tk.END, values=row)

        search_var.trace_add('write', filter_clients)

        tk.Label(top_frame, text='üîç –ü–æ—à—É–∫:', font=('Arial', 12), bg='#34495e', fg='white').pack(side='left')
        tk.Entry(top_frame, textvariable=search_var, font=('Arial', 12), width=30).pack(side='left', padx=(5, 20))
        tk.Label(top_frame, text="–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤", font=("Arial", 20, "bold"), bg='#34495e', fg='white').pack(
            side='left')

        tree.pack(expand=True, fill='both', padx=20, pady=10)

        def edit_selected_client():
            selected = tree.focus()
            if not selected:
                messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
                return
            values = tree.item(selected, 'values')
            open_edit_client_details(values[:-1])

        def delete_selected_client():
            selected = tree.focus()
            if not selected:
                messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
                return
            values = tree.item(selected, 'values')
            client_id = values[0]
            client_name = values[1]
            confirm = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ {client_name}?")
            if confirm:
                if delete_client_by_id(client_id):
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ö–ª—ñ—î–Ω—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ.")
                    tree.delete(selected)
                    # –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
                    all_clients_data[:] = [row for row in all_clients_data if row[0] != client_id]
                else:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞.")

        tk.Button(edit_win, text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω–µ", font=("Arial", 14), bg="#f39c12", fg="white",
                  command=edit_selected_client).pack(pady=10)
        tk.Button(edit_win, text="–í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω–µ", font=("Arial", 14), bg="#c0392b", fg="white",
                  command=delete_selected_client).pack(pady=10)

    def show_subscription_info():
        info_win = tk.Toplevel()
        info_win.title("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏")
        info_win.geometry("750x700")
        info_win.configure(bg='#ecf0f1')

        tk.Label(info_win, text="–¢–∏–ø–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ñ–≤", font=("Arial", 18, "bold"),
                 bg='#ecf0f1', fg="#2c3e50").pack(pady=(10, 0))

        text_frame = tk.Frame(info_win, bg='#ecf0f1')
        text_frame.pack(expand=True, fill='both', padx=10, pady=10)

        subscription_text = (
            "‚úÖ –†–∞–∑–æ–≤–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è (1v)\n"
            "‚Ä¢ –û–ø–∏—Å: –Ü–¥–µ–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤, –≥–æ—Å—Ç–µ–π –º—ñ—Å—Ç–∞ –∞–±–æ —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É. "
            "–í–∫–ª—é—á–∞—î –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª—É –∞–±–æ –≥—Ä—É–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 150‚Äì250 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üóìÔ∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è / –º—ñ—Å—è—Ü—å (4v)\n"
            "‚Ä¢ –û–ø–∏—Å: –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª—é–¥–µ–π –∑ —â—ñ–ª—å–Ω–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º –∞–±–æ —Ç–∏—Ö, —Ö—Ç–æ –ø–æ—á–∏–Ω–∞—î —Å–≤—ñ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π —à–ª—è—Ö. "
            "–í–∫–ª—é—á–∞—î 4 –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∑–∞–ª—É –ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 600‚Äì800 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üìÜ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å / –º—ñ—Å—è—Ü—å (8v)\n"
            "‚Ä¢ –û–ø–∏—Å: –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ñ—ñ–∑–∏—á–Ω–æ—ó —Ñ–æ—Ä–º–∏. "
            "–î–æ–∑–≤–æ–ª—è—î —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è –¥–≤—ñ—á—ñ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó ‚Äî 30 –¥–Ω—ñ–≤.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 1000‚Äì1200 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üîÑ –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç (–º—ñ—Å—è—á–Ω–∏–π) (unlimitedV)\n"
            "‚Ä¢ –û–ø–∏—Å: –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è. "
            "–Ü–¥–µ–∞–ª—å–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤—ñ–¥–≤—ñ–¥—É—é—Ç—å –∑–∞–ª 3+ —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 1500‚Äì2000 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üìÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç–∏ —Ç—Ä–∏–≤–∞–ª–æ—ó –¥—ñ—ó (3, 6, 12 –º—ñ—Å—è—Ü—ñ–≤) (monthPass)\n"
            "‚Ä¢ –û–ø–∏—Å: –ï–∫–æ–Ω–æ–º—ñ—á–Ω–æ –≤–∏–≥—ñ–¥–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –º–∞—î —Å—Ç–∞–±—ñ–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. "
            "–ó–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–ª—É –ø—Ä–æ—Ç—è–≥–æ–º –æ–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –∑ –±–æ–Ω—É—Å–Ω–∏–º–∏ –∑–Ω–∏–∂–∫–∞–º–∏.\n"
            "‚Ä¢ –¶—ñ–Ω–∏:\n"
            "   o 3 –º—ñ—Å—è—Ü—ñ: 4000‚Äì5000 –≥—Ä–Ω\n"
            "   o 6 –º—ñ—Å—è—Ü—ñ–≤: 7000‚Äì9000 –≥—Ä–Ω\n"
            "   o 12 –º—ñ—Å—è—Ü—ñ–≤: 12 000‚Äì15 000 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üëë VIP / –ü—Ä–µ–º—ñ—É–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç (VIP)\n"
            "‚Ä¢ –û–ø–∏—Å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∫–æ–º—Ñ–æ—Ä—Ç —ñ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ. –í–∫–ª—é—á–∞—î:\n"
            "   o –ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–ª—É\n"
            "   o –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –≤–æ–¥—É/–Ω–∞–ø–æ—ó\n"
            "   o –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó\n"
            "   o –î–æ—Å—Ç—É–ø –¥–æ —Å–∞—É–Ω–∏ –∞–±–æ –∑–æ–Ω–∏ —Ä–µ–ª–∞–∫—Å—É\n"
            "   o –†—É—à–Ω–∏–∫–∏ —Ç–∞ —ñ–Ω—à—ñ –∑—Ä—É—á–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 2500‚Äì4000 –≥—Ä–Ω/–º—ñ—Å—è—Ü—å\n"
        )

        text_widget = tk.Text(text_frame, wrap='word', font=("Arial", 12), bg='white', fg='black')
        text_widget.insert('1.0', subscription_text)
        text_widget.config(state='disabled')
        text_widget.pack(expand=True, fill='both')

        tk.Button(info_win, text="–ó–∞–∫—Ä–∏—Ç–∏", command=info_win.destroy,
                  bg="#c0392b", fg="white", font=("Arial", 12)).pack(pady=10)

    frame_add, container_add = rounded_button_container(icon_frame)
    btn_add = tk.Button(container_add, text="‚ûï", **btn_style)
    btn_add.pack(expand=True)
    btn_add.bind("<Enter>", lambda e: on_enter(e, btn_add))
    btn_add.bind("<Leave>", lambda e: on_leave(e, btn_add))
    frame_add.pack(side="left", padx=40)
    tk.Label(frame_add, text="–î–æ–¥–∞—Ç–∏", fg="white", bg="#2c3e50", font=("Arial", 12)).pack()
    btn_add.config(command=open_add_client_window)

    frame_edit, container_edit = rounded_button_container(icon_frame)
    btn_edit = tk.Button(container_edit, text="üìù", **btn_style)
    btn_edit.pack(expand=True)
    btn_edit.bind("<Enter>", lambda e: on_enter(e, btn_edit))
    btn_edit.bind("<Leave>", lambda e: on_leave(e, btn_edit))
    frame_edit.pack(side="left", padx=40)
    tk.Label(frame_edit, text="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", fg="white", bg="#2c3e50", font=("Arial", 12)).pack()
    btn_edit.config(command=open_edit_client_window)

    frame_manage, container_manage = rounded_button_container(icon_frame)
    btn_manage = tk.Button(container_manage, text="üìÜ", **btn_style)
    btn_manage.pack(expand=True)
    btn_manage.bind("<Enter>", lambda e: on_enter(e, btn_manage))
    btn_manage.bind("<Leave>", lambda e: on_leave(e, btn_manage))
    frame_manage.pack(side="left", padx=40)
    tk.Label(frame_manage, text="–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å", fg="white", bg="#2c3e50", font=("Arial", 12)).pack()
    btn_manage.config(command=open_attendance_management_window)

    info_frame, info_container = rounded_button_container(icon_frame)
    btn_info = tk.Button(info_container, text="‚ÑπÔ∏è", **btn_style)
    btn_info.pack(expand=True)
    btn_info.bind("<Enter>", lambda e: on_enter(e, btn_info))
    btn_info.bind("<Leave>", lambda e: on_leave(e, btn_info))
    btn_info.config(command=show_subscription_info)
    tk.Label(info_frame, text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏", fg="white", bg="#2c3e50", font=("Arial", 12)).pack()
    info_frame.pack(pady=10)
