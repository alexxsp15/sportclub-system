import tkinter as tk
from tkinter import ttk, messagebox
from attendance_window import open_attendance_calendar_window
from database.gym import get_clients_for_trainer, was_client_present_today

def open_trainer_interface(user):
    attend_win = tk.Toplevel()
    attend_win.title("–ö–∞–±—ñ–Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞")
    attend_win.state('zoomed')
    attend_win.configure(bg='#34495e')

    search_var = tk.StringVar()

    title_frame = tk.Frame(attend_win, bg='#34495e')
    title_frame.pack(fill='x', pady=(5, 0))

    title_label = tk.Label(title_frame, text="–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ",
                           font=("Arial", 65, "bold"), bg='#34495e', fg='white')
    title_label.pack(anchor='center')  # –¶–µ–Ω—Ç—Ä –ø–æ —à–∏—Ä–∏–Ω—ñ title_frame

    search_frame = tk.Frame(attend_win, bg='#34495e')
    search_frame.pack(fill='x', padx=20, pady=(5, 10))

    tk.Label(search_frame, text='üîç –ü–æ—à—É–∫:', font=('Arial', 12),
             bg='#34495e', fg='white').pack(side='left')
    tk.Entry(search_frame, textvariable=search_var,
             font=('Arial', 12), width=30).pack(side='left', padx=(5, 0))

    columns = ('id_clients', 'full_name', 'phone', 'email', 'registration_date',
               'trainer_name', 'subscription_type', 'payment', 'attendance', 'present_today')

    headers = {
        'id_clients': 'ID',
        'full_name': "–Ü–º'—è",
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'email': 'Email',
        'registration_date': '–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
        'trainer_name': "–Ü–º'—è —Ç—Ä–µ–Ω–µ—Ä–∞",
        'subscription_type': '–¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏',
        'payment': '–û–ø–ª–∞—Ç–∞',
        'attendance': '–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è',
        'present_today': '–°—å–æ–≥–æ–¥–Ω—ñ'
    }

    tree = ttk.Treeview(attend_win, columns=columns, show='headings')
    sort_directions = {}
    all_clients_data = []

    def try_cast(val):
        try:
            return float(val)
        except (ValueError, TypeError):
            return str(val).lower()

    def sort_by_column(col):
        col_index = columns.index(col)
        reverse = sort_directions.get(col, False)
        sort_directions[col] = not reverse

        filtered_data = []
        query = search_var.get().lower()
        for row in all_clients_data:
            visible = any(query in str(val).lower() for i, val in enumerate(row) if columns[i] != 'id_clients')
            if visible:
                filtered_data.append(row)

        filtered_data.sort(key=lambda x: try_cast(x[col_index]), reverse=reverse)

        tree.delete(*tree.get_children())
        for row in filtered_data:
            tree.insert('', tk.END, values=row)

        for col_name in columns:
            direction = ''
            if col_name == col:
                direction = ' ‚ñº' if reverse else ' ‚ñ≤'
            if col_name == 'id_clients':
                tree.heading(col_name, text='', command=lambda _col=col_name: sort_by_column(_col))
                tree.column(col_name, width=0, stretch=False)
            else:
                tree.heading(col_name, text=headers[col_name] + direction,
                             command=lambda _col=col_name: sort_by_column(_col))

    for col in columns:
        if col == 'id_clients':
            tree.heading(col, text='', command=lambda _col=col: sort_by_column(_col))
            tree.column(col, width=0, stretch=False)
        else:
            tree.heading(col, text=headers[col], command=lambda _col=col: sort_by_column(_col))
            tree.column(col, anchor='center', width=100)

    for client in get_clients_for_trainer(user[0]):
        id_client = client[0]
        attendance_status = "‚úÖ" if was_client_present_today(id_client) else "‚ùå"
        values_with_attendance = list(client) + [attendance_status]
        all_clients_data.append(values_with_attendance)
        tree.insert('', tk.END, values=values_with_attendance)

    def filter_clients(*args):
        query = search_var.get().lower()
        tree.delete(*tree.get_children())

        for row in all_clients_data:
            visible = any(query in str(val).lower() for i, val in enumerate(row) if columns[i] != 'id_clients')
            if visible:
                tree.insert('', tk.END, values=row)

    search_var.trace_add('write', filter_clients)

    tree.pack(expand=True, fill='both', padx=20, pady=10)

    def open_calendar_for_selected():
        selected = tree.focus()
        if not selected:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞.")
            return

        values = tree.item(selected, 'values')
        open_attendance_calendar_window(values)

    tk.Button(attend_win, text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä", font=("Arial", 14), bg="#2980b9", fg="white",
              command=open_calendar_for_selected).pack(pady=10)

    def show_subscription_info():
        info_win = tk.Toplevel()
        info_win.title("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏")
        info_win.geometry("750x700")
        info_win.configure(bg='#ecf0f1')

        tk.Label(info_win, text="–¢–∏–ø–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ñ–≤", font=("Arial", 18, "bold"),
                 bg='#ecf0f1', fg="#2c3e50").pack(pady=(10, 0))

        text_frame = tk.Frame(info_win, bg='#ecf0f1')
        text_frame.pack(expand=True, fill='both', padx=10, pady=10)

        subscription_text = (
            "‚úÖ –†–∞–∑–æ–≤–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è (1v)\n"
            "‚Ä¢ –û–ø–∏—Å: –Ü–¥–µ–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –Ω–æ–≤–∞—á–∫—ñ–≤, –≥–æ—Å—Ç–µ–π –º—ñ—Å—Ç–∞ –∞–±–æ —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ—é –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É. "
            "–í–∫–ª—é—á–∞—î –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª—É –∞–±–æ –≥—Ä—É–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 150‚Äì250 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üóìÔ∏è –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 4 –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è / –º—ñ—Å—è—Ü—å (4v)\n"
            "‚Ä¢ –û–ø–∏—Å: –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª—é–¥–µ–π –∑ —â—ñ–ª—å–Ω–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º –∞–±–æ —Ç–∏—Ö, —Ö—Ç–æ –ø–æ—á–∏–Ω–∞—î —Å–≤—ñ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π —à–ª—è—Ö. "
            "–í–∫–ª—é—á–∞—î 4 –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∑–∞–ª—É –ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 600‚Äì800 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üìÜ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 8 –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å / –º—ñ—Å—è—Ü—å (8v)\n"
            "‚Ä¢ –û–ø–∏—Å: –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó —Ñ—ñ–∑–∏—á–Ω–æ—ó —Ñ–æ—Ä–º–∏. "
            "–î–æ–∑–≤–æ–ª—è—î —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è –¥–≤—ñ—á—ñ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å. –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó ‚Äî 30 –¥–Ω—ñ–≤.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 1000‚Äì1200 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üîÑ –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç (–º—ñ—Å—è—á–Ω–∏–π) (unlimitedV)\n"
            "‚Ä¢ –û–ø–∏—Å: –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—å –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è. "
            "–Ü–¥–µ–∞–ª—å–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤—ñ–¥–≤—ñ–¥—É—é—Ç—å –∑–∞–ª 3+ —Ä–∞–∑–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 1500‚Äì2000 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üìÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç–∏ —Ç—Ä–∏–≤–∞–ª–æ—ó –¥—ñ—ó (3, 6, 12 –º—ñ—Å—è—Ü—ñ–≤) (monthPass)\n"
            "‚Ä¢ –û–ø–∏—Å: –ï–∫–æ–Ω–æ–º—ñ—á–Ω–æ –≤–∏–≥—ñ–¥–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –º–∞—î —Å—Ç–∞–±—ñ–ª—å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. "
            "–ó–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–ª—É –ø—Ä–æ—Ç—è–≥–æ–º –æ–±—Ä–∞–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –∑ –±–æ–Ω—É—Å–Ω–∏–º–∏ –∑–Ω–∏–∂–∫–∞–º–∏.\n"
            "‚Ä¢ –¶—ñ–Ω–∏:\n"
            "   o 3 –º—ñ—Å—è—Ü—ñ: 4000‚Äì5000 –≥—Ä–Ω\n"
            "   o 6 –º—ñ—Å—è—Ü—ñ–≤: 7000‚Äì9000 –≥—Ä–Ω\n"
            "   o 12 –º—ñ—Å—è—Ü—ñ–≤: 12 000‚Äì15 000 –≥—Ä–Ω\n"
            "________________________________________\n\n"

            "üëë VIP / –ü—Ä–µ–º—ñ—É–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç (VIP)\n"
            "‚Ä¢ –û–ø–∏—Å: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∫–æ–º—Ñ–æ—Ä—Ç —ñ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ. –í–∫–ª—é—á–∞—î:\n"
            "   o –ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–ª—É\n"
            "   o –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –≤–æ–¥—É/–Ω–∞–ø–æ—ó\n"
            "   o –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó\n"
            "   o –î–æ—Å—Ç—É–ø –¥–æ —Å–∞—É–Ω–∏ –∞–±–æ –∑–æ–Ω–∏ —Ä–µ–ª–∞–∫—Å—É\n"
            "   o –†—É—à–Ω–∏–∫–∏ —Ç–∞ —ñ–Ω—à—ñ –∑—Ä—É—á–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –¶—ñ–Ω–∞: 2500‚Äì4000 –≥—Ä–Ω/–º—ñ—Å—è—Ü—å\n"
        )

        text_widget = tk.Text(text_frame, wrap='word', font=("Arial", 12), bg='white', fg='black')
        text_widget.insert('1.0', subscription_text)
        text_widget.config(state='disabled')
        text_widget.pack(expand=True, fill='both')

        tk.Button(info_win, text="–ó–∞–∫—Ä–∏—Ç–∏", command=info_win.destroy,
                  bg="#c0392b", fg="white", font=("Arial", 12)).pack(pady=10)

    info_frame = tk.Frame(attend_win, bg='#34495e')
    info_frame.pack(pady=(10, 20))

    tk.Label(info_frame, text="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏:",
             font=("Arial", 14, "bold"), bg='#34495e', fg='white').pack(side='left')

    tk.Button(info_frame, text="i", font=("Arial", 14, "bold"), width=2,
              bg="#27ae60", fg='white', command=show_subscription_info).pack(side='left', padx=(10, 0))
